//
//  LoginViewController.swift
//  SpotifySearch
//
//  Created by Arash Goodarzi on 10/29/19.
//  Copyright (c) 2019 Arash Goodarzi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject {
    func displaySuccessCheckLoginState(viewModel: Login.CheckState.ViewModel.Success)
    func displayNoConnectionCheckLoginState(viewModel: Login.CheckState.ViewModel.Failure)
    func displayServerErrorCheckLoginState(viewModel: Login.CheckState.ViewModel.Failure)
}

class LoginViewController: UIViewController {
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    //MARK: - Outlets and vars
    @IBOutlet weak var retryBtn: UIButton!
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
//    override func viewDidLoad() {
//        super.viewDidLoad()
//        
//    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        checkLoginState()
    }
    
    //MARK: - Actions
    @IBAction func retryBtnPressed(_ sender : AnyObject) {
        retryBtn.isHidden = true
        checkLoginState()
    }
    
    //MARK: - Funcs
    func prepareLoginButton() {
        
        let button = SpotifyLoginProvider.getLoginButton(for: self)
        view.addSubview(button)
        button.translatesAutoresizingMaskIntoConstraints = false
        
        //height and width has been set before.
        let horizontalConstraint = NSLayoutConstraint(item: button, attribute: .centerX, relatedBy: .equal, toItem: view, attribute: .centerX, multiplier: 1, constant: 0)
        let verticalConstraint = NSLayoutConstraint(item: button, attribute: .bottom, relatedBy: .equal, toItem: self.view, attribute: .bottom, multiplier: 1, constant: -50)
        view.addConstraints([horizontalConstraint, verticalConstraint])
    }
    
    //**
    func checkLoginState() {
        let request = Login.CheckState.Request()
        interactor?.checkLoginState(request: request)
    }
    
    //end of class
}

//MARK: - Extensions
extension LoginViewController: LoginDisplayLogic {
 
    func displaySuccessCheckLoginState(viewModel: Login.CheckState.ViewModel.Success) {
        
        //we have access token
        if viewModel.isUserLogedIn {
            router?.routeToSearch()
            return
        }
        
        //we have no access token!
        prepareLoginButton()
    }
    
    func displayNoConnectionCheckLoginState(viewModel: Login.CheckState.ViewModel.Failure) {
        retryBtn.isHidden = false
        Global.Funcs.showNoConnectionAlert()
    }

    func displayServerErrorCheckLoginState(viewModel: Login.CheckState.ViewModel.Failure) {
        prepareLoginButton()
        Global.Funcs.showAlert(message: viewModel.message)
    }
}

//***
extension LoginViewController: SpotifyLoginDelegate {
    func loginSuccessfull() {
        checkLoginState()
    }
}
