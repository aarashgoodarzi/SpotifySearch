//
//  TrackViewController.swift
//  SpotifySearch
//
//  Created by Arash Goodarzi on 10/29/19.
//  Copyright (c) 2019 Arash Goodarzi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TrackDisplayLogic: AnyObject {
    func displaySetTrack(viewModel: Track.Set.ViewModel)
}

class TrackViewController: UIViewController {
    
    var interactor: TrackBusinessLogic?
    var router: (NSObjectProtocol & TrackRoutingLogic & TrackDataPassing)?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    
    //MARK: Outlets and vars
    @IBOutlet weak var name: UILabel!
    @IBOutlet weak var singer: UILabel!
    @IBOutlet weak var album: UILabel!
    @IBOutlet weak var popularity: UILabel!
    @IBOutlet weak var id: UILabel!
    @IBOutlet weak var trackImage: UIImageView!
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = TrackInteractor()
        let presenter = TrackPresenter()
        let router = TrackRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setTrack()
    }
    
    //MARK: Actions
    
    
    //MARK: Funcs
    func setTrack() {
        let request = Track.Set.Request()
        interactor?.setTrack(request: request)
    }
    
    //end of class
}

//MARK: - Extensions
extension TrackViewController: TrackDisplayLogic {
    
    func displaySetTrack(viewModel: Track.Set.ViewModel) {
        self.name.text = viewModel.name
        self.singer.text = viewModel.singer
        self.album.text = viewModel.album
        self.id.text = viewModel.id
        self.popularity.text = viewModel.popularity
        self.trackImage.downloadImage(url: viewModel.imageUrl)
    }
}
