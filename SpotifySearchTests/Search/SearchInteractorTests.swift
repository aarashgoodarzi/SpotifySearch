//
//  SearchInteractorTests.swift
//  SpotifySearch
//
//  Created by Arash Goodarzi on 11/1/19.
//  Copyright (c) 2019 Arash Goodarzi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SpotifySearch
import XCTest

class SearchInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SearchInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupSearchInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchInteractor() {
        sut = SearchInteractor()
    }
    
    // MARK: Test doubles
    
    class SearchPresentationLogicSpy: SearchPresentationLogic {
        
        var presentSearchTracksCalled = false
        
        func presentSearchTracks(response: Search.Tracks.Response) {
            presentSearchTracksCalled = true
        }
    }
    
    // MARK: Tests
    func testPresentSearchTracks() {
        
        //Given
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        
        //When
        let request = Search.Tracks.Request(query: "a qeury")
        self.sut.searchTracks(request: request)
        
        //Then
        let workItem = DispatchWorkItem {
            XCTAssertTrue(spy.presentSearchTracksCalled, "should ask the presenter to present the result")
        }
        let timeOut = DispatchTime.now() + 5
        DispatchQueue.main.asyncAfter(deadline: timeOut, execute: workItem)
    }
}
