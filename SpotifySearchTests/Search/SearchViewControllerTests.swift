//
//  SearchViewControllerTests.swift
//  SpotifySearch
//
//  Created by Arash Goodarzi on 11/1/19.
//  Copyright (c) 2019 Arash Goodarzi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SpotifySearch
import XCTest

class SearchViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SearchViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSearchViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "SearchViewController") as? SearchViewController
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    class SearchBusinessLogicSpy: SearchBusinessLogic {
        
        var searchTracksCalled = false
        var saveTrackInDataStoreCalled = false
        
        func searchTracks(request: Search.Tracks.Request) {
            searchTracksCalled = true
        }
        
        func saveTrackInDataStore(request: Search.SaveTrackInDataStore.Request) {
            saveTrackInDataStoreCalled = true
        }
    
    }
    
    // MARK: Tests
    func testSearchTracks() {
        
        //Given
        let spy = SearchBusinessLogicSpy()
        sut.interactor = spy
    
        //When
        sut.searchTracks(query: "a query")
        
        //Then
        XCTAssertTrue(spy.searchTracksCalled, "should ask the interactor to do an action")
    }
    
    //**
    func testSaveTrackInDataStore() {
        
        //Given
        let spy = SearchBusinessLogicSpy()
        sut.interactor = spy
        
        //When
        sut.saveTrackInDataStore(track: Seed.Search.aTrack)
        
        //Then
        XCTAssertTrue(spy.saveTrackInDataStoreCalled, "should ask the interactor to do an action")
    }
}
