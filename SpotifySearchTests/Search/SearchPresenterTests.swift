//
//  SearchPresenterTests.swift
//  SpotifySearch
//
//  Created by Arash Goodarzi on 11/1/19.
//  Copyright (c) 2019 Arash Goodarzi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SpotifySearch
import XCTest

class SearchPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: SearchPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupSearchPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchPresenter() {
        sut = SearchPresenter()
    }
    
    // MARK: Test doubles
    
    class SearchDisplayLogicSpy: SearchDisplayLogic {
        
        var tracks: [ServerModels.Response.TracksModel.Item]?
        var displaySuccessSearchTracksCalled = false
        var displayNoConnectionSearchTracksCalled = false
        var displayServerErrorSearchTracksCalled = false
        
        func displaySuccessSearchTracks(viewModel: Search.Tracks.ViewModel.Success) {
            tracks = viewModel.tracks
            displaySuccessSearchTracksCalled = true
        }
        
        func displayNoConnectionSearchTracks(viewModel: Search.Tracks.ViewModel.Failure) {
            displayNoConnectionSearchTracksCalled = true
        }
        
        func displayServerErrorSearchTracks(viewModel: Search.Tracks.ViewModel.Failure) {
            displayServerErrorSearchTracksCalled = true
        }
        
        
    }
    
    // MARK: Tests
    func testDisplaySuccessSearchTracks() {
        
        //Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
      
        //When
        let seedTracks = Seed.Search.someTracks
        let response = Search.Tracks.Response(state: Result.success(seedTracks))
        sut.presentSearchTracks(response: response)
        
        //Then
        XCTAssertTrue(spy.displaySuccessSearchTracksCalled, "should ask the view Controller to display Succefully the result")
        XCTAssertTrue(spy.tracks != nil, "view Controller should have some tracks")
    }
    
    //**
    func testDisplayNoConnectionSearchTracks() {
        
        //Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
        
        //When
        let noConnectionError = ServerModels.NoConnectionError()
        let response = Search.Tracks.Response(state: Result.failure(noConnectionError))
        sut.presentSearchTracks(response: response)
        
        //Then
        XCTAssertTrue(spy.displayNoConnectionSearchTracksCalled, "should ask the view Controller to display Succefully the result")
        XCTAssertTrue(spy.tracks == nil, "view Controller should have no tracks")
    }
    
    //**
    func testDisplayServerErrorSearchTracks() {
        
        //Given
        let spy = SearchDisplayLogicSpy()
        sut.viewController = spy
        
        //When
        let serverErrorModel = ServerModels.ServerErrorModel(error: ServerModels.ServerErrorModel.Error(status: 400, message: "no search query"))
        let response = Search.Tracks.Response(state: Result.failure(serverErrorModel))
        sut.presentSearchTracks(response: response)
        
        //Then
        XCTAssertTrue(spy.displayServerErrorSearchTracksCalled, "should ask the view Controller to display Succefully the result")
        XCTAssertTrue(spy.tracks == nil, "view Controller should have no tracks")
    }
}
